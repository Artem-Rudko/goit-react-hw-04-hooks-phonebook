{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","props","useState","name","setName","number","setNumber","id","setId","handleInputChange","e","currentTarget","value","reset","className","styles","inputForm","onSubmit","preventDefault","label","input","type","placeholder","pattern","title","required","onChange","submitBtn","defaultProps","ContactItem","onDeleteContact","onClick","ContactList","contacts","contactList","map","Filter","App","JSON","parse","window","localStorage","getItem","setContacts","filter","setFilter","useEffect","setItem","stringify","normalizedFilter","toLowerCase","filteredContacts","contact","includes","data","normalizedData","dublicate","find","newContact","uuidv4","alert","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1f858f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__r7Bti\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm(props) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const [id, setId] = useState('');\n\n    const handleInputChange = e => {\n        const { name, value } = e.currentTarget;\n\n        switch (name) {\n            case 'name':\n                setName(value);\n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        props.onSubmit({ name, number, id });\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n        setId('');\n    };\n\n    return (\n        <form className={styles.inputForm} onSubmit={handleSubmit}>\n            <label className={styles.label}>\n                <span>Name</span>\n                <input\n                    className={styles.input}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    placeholder=\"i.e. James Bond\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    onChange={handleInputChange}\n                />\n            </label>\n            <label className={styles.label}>\n                Number\n                <input\n                    className={styles.input}\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    placeholder=\"i.e. 007-00-00\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    onChange={handleInputChange}\n                />\n            </label>\n            <button className={styles.submitBtn} type=\"submit\">\n                Add contact\n            </button>\n        </form>\n    );\n}\n\nContactForm.defaultProps = {\n    value: '',\n};\n\nContactForm.propTypes = {\n    value: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => {\n    return (\n        <li key={id}>\n            <span>{name}:</span>\n            <span>{number}</span>\n            <button type=\"button\" onClick={() => onDeleteContact(id)}>\n                Delete\n            </button>\n        </li>\n    );\n};\n\nContactItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n    return (\n        <ul className={styles.contactList}>\n            {contacts.map(({ id, name, number }) => (\n                <ContactItem\n                    key={id}\n                    name={name}\n                    number={number}\n                    onDeleteContact={onDeleteContact}\n                    id={id}\n                />\n            ))}\n        </ul>\n    );\n};\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n    return (\n        <label className={styles.label}>\n            {' '}\n            Find contacts by name\n            <input\n                className={styles.input}\n                type=\"text\"\n                value={value}\n                placeholder=\"enter name\"\n                onChange={onChange}\n            ></input>\n        </label>\n    );\n};\n\nFilter.defaultProps = {\n    value: '',\n};\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState, useEffect } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport './styles.css';\n\nexport default function App() {\n    const [contacts, setContacts] = useState(() => {\n        return JSON.parse(window.localStorage.getItem('contacts')) ?? [];\n    });\n\n    const [filter, setFilter] = useState(() => {\n        return JSON.parse(window.localStorage.getItem('filter')) ?? '';\n    });\n\n    useEffect(() => {\n        window.localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts]);\n\n    const addNewContact = data => {\n        const normalizedData = data.name.toLowerCase();\n        const dublicate = contacts.find(\n            contact => contact.name.toLowerCase() === normalizedData,\n        );\n\n        const newContact = {\n            ...data,\n            id: uuidv4(),\n        };\n\n        dublicate\n            ? alert(`${dublicate.name} is already in contacts`)\n            : setContacts(contacts => [newContact, ...contacts]);\n    };\n\n    const changeFilter = e => {\n        setFilter(e.currentTarget.value);\n    };\n\n    const deleteContact = contactId => {\n        // console.log('delete was clicked');\n        // console.log(contactId);\n        setContacts(contacts =>\n            contacts.filter(contact => contact.id !== contactId),\n        );\n    };\n\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter),\n    );\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"title\">Phonebook</h1>\n            <ContactForm onSubmit={addNewContact} />\n            <h2>Contacts</h2>\n            <Filter value={filter} onChange={changeFilter} />\n            <ContactList\n                contacts={filteredContacts}\n                onDeleteContact={deleteContact}\n            />\n        </div>\n    );\n}\n\nApp.defaultProps = {\n    contacts: [],\n};\n\nApp.propTypes = {\n    contacts: PropTypes.array,\n    data: PropTypes.shape({ name: PropTypes.string, number: PropTypes.number }),\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './styles.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputForm\":\"ContactForm_inputForm__3s3li\",\"label\":\"ContactForm_label__39pAG\",\"submitBtn\":\"ContactForm_submitBtn__35297\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1L0jQ\",\"input\":\"Filter_input__19PY5\"};"],"sourceRoot":""}